generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO figure out how to add a 1:many self relation in field friends
model User {
  id                     String       @id @default(auto()) @map("_id") @db.ObjectId
  username               String       @unique
  email                  String       @unique
  firstname              String
  lastname               String
  middlename             String
  bio                    String?
  date_of_Birth          DateTime
  gender                 Gender
  address                Address
  role                   Role         @default(USER)
  proffeciency           Proffeciency @default(NEWBIE)
  affiliation            Affiliation  @default(WOOD_ENTHUSIAST)
  user_image             UserImage
  user_status            UserStatus   @default(ACTIVE)
  date_joined            DateTime     @default(now())
  liked_posts_id         String[]     @default([]) @db.ObjectId
  updatedAt              DateTime?    @updatedAt
  up_voted_comments_id   String[]     @default([]) @db.ObjectId
  down_voted_comments_id String[]     @default([]) @db.ObjectId
  liked_projects_id      String[]     @default([]) @db.ObjectId

  credential          Credential?
  posts               Post[]
  projects            Project[]
  liked_posts         Post[]      @relation("liked_posts", fields: [liked_posts_id], references: [id])
  up_voted_comments   Comment[]   @relation("up_voted_comments", fields: [up_voted_comments_id], references: [id])
  down_voted_comments Comment[]   @relation("down_voted_comments", fields: [down_voted_comments_id], references: [id])
  comments            Comment[]
  liked_projects      Project[]   @relation("liked_projects", fields: [liked_projects_id], references: [id])
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  author_id    String      @db.ObjectId
  context     String
  status      PostStatus  @default(ACTIVE)
  tags        String[]    @default([])
  media       PostMedia[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  likes_by_id String[]    @default([]) @db.ObjectId

  liked_by_users    User[]   @relation("liked_posts", fields: [likes_by_id], references: [id])
  liked_by_users_id String[] @db.ObjectId
  author            User     @relation(fields: [author_id], references: [id])

  comments Comment[]
}

model Project {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  author_id      String         @db.ObjectId
  context       String
  tags          String[]       @default([])
  media         ProjectMedia[]
  projectStatus PostStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  like_by_users User[]    @relation("liked_projects", fields: [likes_by_id], references: [id])
  likes_by_id   String[]  @db.ObjectId
  author        User      @relation(fields: [author_id], references: [id])
  Comment       Comment[]
}

model Comment {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  type                   CommentType
  // isReply                Boolean     @default(false) // ! test if this works
  content                String
  status                 PostStatus  @default(ACTIVE)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime?   @updatedAt
  up_voted_by_users_id   String[]    @default([]) @db.ObjectId
  down_voted_by_users_id String[]    @default([]) @db.ObjectId

  reply_to_id String?  @db.ObjectId
  author_id   String   @db.ObjectId
  post_id     String?  @db.ObjectId
  project_id  String?  @db.ObjectId
  replies_id  String[] @db.ObjectId

  up_voted_by_users   User[]   @relation("up_voted_comments", fields: [up_voted_by_users_id], references: [id])
  down_voted_by_users User[]   @relation("down_voted_comments", fields: [down_voted_by_users_id], references: [id])
  author              User     @relation(fields: [author_id], references: [id])
  post                Post?    @relation(fields: [post_id], references: [id])
  project             Project? @relation(fields: [project_id], references: [id])

  replies    Comment[] @relation("replies")
  replies_to Comment?  @relation("replies", fields: [reply_to_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Credential {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique @db.ObjectId
}

model Sample {
  test1 String @id @map("_id") @db.ObjectId
  test2 String
}

// * TYPES
type Address {
  barangay     String
  municipality String
  province     String
}

type UserImage {
  pfp_name   String
  cover_name String
}

type PostMedia {
  filename String
  caption  String?
}

type ProjectMedia {
  filename String
  caption  String?
}

// * ENUMS

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

enum CommentType {
  POST
  PROJECT
}

enum UserStatus {
  ARCHIVED
  ACTIVE
}

enum Affiliation {
  WOOD_ENTHUSIAST
  WOOD_WORKER
  WOOD_CRAFTER
}

enum UserActivity {
  ONLINE
  OFFLINE
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Proffeciency {
  NEWBIE
  NOVICE
  EXPERT
}

enum PostStatus {
  ACTIVE
  ARCHIVED
}
